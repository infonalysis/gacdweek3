rnorm(10)
x <- c(1,2,4)
q <- c(x,x,8)
x
q
x[3]
x[2:3:1]
x
x[2:3]
x[1:3]
mean(x)
sd(x)
y <- mean(x)
y
y # print out y
data()
mean(Nile)
sd(Nile)
hist(Nile)
hist(Nile,breaks=12)
hist(Nile,breaks=5)
q
x<-(2,5,7)
x<-c(2,5,7)
q
q()
counts the number of odd intergers in x
addcount <- 0
addcount <- function(x) {}
addcount <- function(x) {
k <- 0
for (n in x) {
if (n %% 2 == 1) k <- k+1
}
return(k)
}
addcount(c(1,3,5))
addcount(c(1,2,3,7,9))
x <- 1:4
x
lapply(x, runif)
library(datasets)
data(iris)
?iris
iris
head(iris)
lapply(iris$Sepal.Length, mean)
iris$Sepal.Length
tapply(iris$Sepal.Length, mean)
class(iris$Sepal.Length)
apply(iris$Sepal.Length, mean)
head(iris)
iris[iris$Species == virginica]
iris[iris$Species == "virginica"]
iris[iris$Species == "virginica",]
colMeans(iris[iris$Species == "virginica",])
colMeans(iris[iris$Species == "virginica",]$Sepal.Length)
tapply(iris$Sepal.Length, iris$Species == "virginica", mean)
iris$Species == "virginica"
iris$Sepal.Length
mean(iris$Sepal.Length)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
head(mtcars)
mtcars$cyl
mtcars[,2:3]
mean(mtcars[mtcars$cyl==4]$mpg)
mtcars[,1:2]
mtcars$cyl==4
mtcars[mtcars$cyl==4]
mtcars[mtcars$cyl==4,]
mtcars[mtcars$cyl==4,]$mpg
mean(mtcars[mtcars$cyl==4,]$mpg)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==8,]$hp) - mean(mtcars[mtcars$cyl==4,]$hp)
mean(mtcars[mtcars$cyl==8,]$hp)
iris
iris$Species==virginica
iris$Species=="virginica"
iris[iris$Species=="virginica",]
iris[iris$Species=="virginica", 1:4]
colMeans(iris[iris$Species=="virginica", 1:4])
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
makeVector <- function(x = numeric()) {#
        m <- NULL#
        set <- function(y) {#
                x <<- y#
                m <<- NULL#
        }#
        get <- function() x#
        setmean <- function(mean) m <<- mean#
        getmean <- function() m#
        list(set = set, get = get,#
             setmean = setmean,#
             getmean = getmean)#
}
cachemean <- function(x, ...) {#
        m <- x$getmean()#
        if(!is.null(m)) {#
                message("getting cached data")#
                return(m)#
        }#
        data <- x$get()#
        m <- mean(data, ...)#
        x$setmean(m)#
        m#
}
myVec <- rnorm(1000)
system.time(cachemean(myVec))
myVec <- makeVector(rnorm(1000))
system.time(cachemean(myVec))
myVec <- makeVector(rnorm(10000))
system.time(cachemean(myVec))
myVec <- makeVector(rnorm(100000))
system.time(cachemean(myVec))
myVec <- makeVector(rnorm(1000000))
system.time(cachemean(myVec))
myVec <- makeVector(rnorm(10000000))
system.time(cachemean(myVec))
r <- 10000
c <- 10000
makeCacheMatrix <- function(x = matrix()) {#
        m <- NULL#
        set <- function(y) {#
                x <<- y#
                m <<- NULL#
        }#
        get <- function() x#
        setInverse <- function(solve) m <<- solve#
        getInverse <- function() m#
        list(set = set, get = get,#
             setInverse = setInverse,#
             getInverse = getInverse)#
}
cacheSolve <- function(x, ...) {#
        ## Return a matrix that is the inverse of 'x'#
        m <- x$getInverse()#
        if(!is.null(m)) {#
                message("getting cached data")#
                return(m)#
        }#
        data <- x$get()#
        m <- solve(data, ...)#
        x$setInverse(m)#
        m#
#
}
ptm <- proc.time()
mtx <- makeCacheMatrix(matrix(rnorm((r*c),mean=30,sd=15),nrow=r,ncol=c))
proc.time() - ptm
ptm <- proc.time()
cacheSolve(mtx)
proc.time() - ptm
ptm <- proc.time()
cacheSolve(mtx)
proc.time() - ptm
setwd("/Users/Ben/Documents/School/Coursera/Cleaning\ Data/gacdweek3")
ls
?read.file
?read.csv
getwd()
dir()
dir("UCI\ HAR\ Dataset")
dir("UCI\ HAR\ Dataset/test")
dir("UCI\ HAR\ Dataset/test/Inertial\ Signals")
read.table("UCI\ HAR\ Dataset/test/Inertial\ Signals/body_acc_x_test.txt")
test <- read.table("UCI\ HAR\ Dataset/test/Inertial\ Signals/body_acc_x_test.txt")
head(test)
561 % 128
561 %% 128
(561-49)/128
test2 <- read.table("UCI\ HAR\ Dataset/test/X_test.txt")
head(test2)
library(reshape2)
testHeaders <- read.table(""UCI\ HAR\ Dataset/features.txt")
testHeaders <- read.table("UCI\ HAR\ Dataset/features.txt")
testHeaders
test["FieldNames"] <- testHeaders$V2
data.frame(t(testHeaders))
data.frame(t(testHeaders))[2,]
colnames(test)
colnames(test) <- data.frame(t(testHeaders))[2,]
colnames(test2) <- data.frame(t(testHeaders))[2,]
head(test2)
data.frame(t(testHeaders))[2,]
class(data.frame(t(testHeaders))[2,])
t(testHeaders)[2,]
class(t(testHeaders)[2,])
colnames(test2) <- t(testHeaders)[2,]
head(test2)
